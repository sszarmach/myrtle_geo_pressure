---
title: Tag Label
format: html
editor: visual
---

# Tag labelling

This script will guide you through the tag labeling and creation of the pressure map

```{r, setup}
# Choose the id 
id <- "CG193"

# Working directory is automatically set to the project root

library(GeoPressureR)
library(tidyverse)
```

## Edit `config.yml`

``` yaml
CG179:
  id: "CG179"
  crop_start: "2022-06-05"
  crop_end: "2023-06-11"
  known: !expr data.frame(stap_id = 1,
                    known_lon = -149.74,
                    known_lat = 61.15)
  #-- GEOLIGHT
  # twl_offset:
  #-- MOVEMENT MODEL
  movement_type: "as"
  
CG181:
  id: "CG181"
  crop_start: "2022-06-04"
  crop_end: "2023-06-01"
  known: !expr data.frame(stap_id = 1,
                    known_lon = -149.750052,
                    known_lat = 61.158430)
  #-- GEOLIGHT
  # twl_offset:
  #-- MOVEMENT MODEL
  movement_type: "as"
  
CG193:
  id: "CG193"
  crop_start: "2022-06-16"
  crop_end: "2023-06-11"
  known: !expr data.frame(stap_id = 1,
                    known_lon = 61.165691,
                    known_lat = -149.779153)
  #-- GEOLIGHT
  # twl_offset:
  #-- MOVEMENT MODEL
  movement_type: "as"

CG194:
  id: "CG194"
  crop_start: "2022-06-07"
  crop_end: "2023-06-05"
  known: !expr data.frame(stap_id = 1,
                    known_lon = 61.162198,
                    known_lat = -149.725350)
  #-- GEOLIGHT
  # twl_offset:
  #-- MOVEMENT MODEL
  movement_type: "as"
  
CG206:
  id: "CG206"
  crop_start: "2022-06-15"
  crop_end: "2023-06-09"
  known: !expr data.frame(stap_id = 1,
                    known_lon = 61.157656,
                    known_lat = -149.793144)
  #-- GEOLIGHT
  # twl_offset:
  #-- MOVEMENT MODEL
  movement_type: "as"
     
CG207:
  id: "CG207"
  crop_start: "2022-06-12"
  crop_end: "2022-06-06"
  known: !expr data.frame(stap_id = 1,
                    known_lon = 61.15974,
                    known_lat = -149.780571)
  #-- GEOLIGHT
  # twl_offset:
  #-- MOVEMENT MODEL
  movement_type: "as"
```

Check that the config is correct

```{r}
stopifnot(id == config::get("id", config = id))
```

## Sensor data and crop date

Check if the crop dates (in red) are correct.

```{r}
tag_no_crop <- tag_create(config::get("id", id), directory = paste0("/Users/sjs7465/Documents/GitHub/myrtle_geo_pressure/data/raw-tag/", id,""))

plot(tag_no_crop, type = "pressure", plot_plotly = F) +
  geom_vline(
    xintercept = c(as.POSIXct(config::get("crop_start", id)),
                   as.POSIXct(config::get("crop_end", id))),
    color = "red", lwd = 1)
```

You might want to change `type` to check the values of the other sensors (acceleration or light)

Create tag with crop date

```{r tag_create}
tag <- tag_create(config::get("id", id),
  crop_start = config::get("crop_start", id),
  crop_end = config::get("crop_end", id),
  directory = paste0("/Users/sjs7465/Documents/GitHub/myrtle_geo_pressure/data/raw-tag/", id,""))
```

## Create label and edit on Trainset

```{r}
tag_label_write(tag, file=glue::glue("/Users/sjs7465/Documents/GitHub/myrtle_geo_pressure/data/tag-label/{tag$param$id}.csv"))
```

Open `csv` and edit on <https://trainset.raphaelnussbaumer.com/>.

## Check 1-2

Read the label file and perform [check 1]().

```{r tag_label}
tag <- tag_label(tag, file=glue::glue("/Users/sjs7465/Documents/GitHub/myrtle_geo_pressure/data/tag-label/{tag$param$id}-labeled.csv"))
```

Perform [check 2]()

```{r}
plot(tag, type = "pressure")
```

## Check 3-5: Compute `pressurepath`

Compute pressure map on a coarse grid to perform check 3-5.

```{r}
tag <- tag_set_map(tag,
                  extent = config::get("extent", id),
                  scale = 1,
                  known = config::get("known", id),
                  include_min_duration = 24
                  ) |> 
  geopressure_map(max_sample = 50)S
```

Compute `pressurepath`

```{r}
pressurepath <- pressurepath_create(tag)
```

Perform [check 3]()

```{r}
plot_pressurepath(pressurepath)
```

Perform [check 4]()

```{r}
plot_pressurepath(pressurepath, type = "histogram")
```

Perform [check 5]()

```{r, eval = F}
geopressureviz(tag,
  pressurepath = pressurepath,
)
```

## Update of `tag` and `pressurepath`

```{r}
tag <- tag_update(tag, file=glue::glue("/Users/sjs7465/Documents/GitHub/myrtle_geo_pressure/data/tag-label/{tag$param$id}-labeled.csv"))
pressurepath <- pressurepath_update(pressurepath, tag)
```

## Pressurepath on the most likely path

Check marginal map, most-likely path and

```{r, eval = F}
geopressureviz(id)
```

Run check 3-5

```{r}
load(glue("./data/interim/{id}.RData"))
plot_pressurepath(pressurepath, type = "ts")
plot_pressurepath(pressurepath, type = "hist")
```
